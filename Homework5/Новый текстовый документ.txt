{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f1b29b07",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import scipy.stats as stats\n",
    "import math\n",
    "from statsmodels.stats.weightstats import _zconfint_generic\n",
    "\n",
    "# Для отображения графиков\n",
    "%matplotlib inline\n",
    "\n",
    "# Генерация данных из косинусного распределения\n",
    "cosine_distribution = stats.cosine()\n",
    "data_sample = cosine_distribution.rvs(size=100)\n",
    "\n",
    "# Реальные параметры распределения\n",
    "true_mean = cosine_distribution.mean()  # Математическое ожидание\n",
    "true_variance = cosine_distribution.var()  # Дисперсия\n",
    "\n",
    "# Построение гистограммы данных и теоретической плотности распределения\n",
    "plt.hist(data_sample, bins=20, density=True, alpha=0.6, color='green', label='Гистограмма выборки')\n",
    "x_values = np.linspace(-4, 4, 100)\n",
    "pdf_values = cosine_distribution.pdf(x_values)\n",
    "plt.plot(x_values, pdf_values, color='black', lw=2, label='Теоретическая плотность')\n",
    "plt.xlabel('Значения')\n",
    "plt.ylabel('Плотность')\n",
    "plt.title('Выборка и теоретическая плотность распределения')\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "# Выборочные средние и дисперсия\n",
    "mean_sample = np.mean(data_sample)\n",
    "variance_sample = np.var(data_sample)\n",
    "print(f\"Выборочное среднее: {mean_sample}\")\n",
    "print(f\"Выборочная дисперсия: {variance_sample}\")\n",
    "\n",
    "# Функция для построения распределения выборочных средних\n",
    "def plot_distribution_of_sample_means(dist, n_samples, num_iterations=1000, mean_true=0, variance_true=1, save_as=None):\n",
    "    sample_means = [np.mean(dist.rvs(size=n_samples)) for _ in range(num_iterations)]\n",
    "    \n",
    "    plt.figure(figsize=(10, 6))\n",
    "    plt.hist(sample_means, bins=30, density=True, alpha=0.6, color='blue', label='Гистограмма средних')\n",
    "    \n",
    "    # Теоретическая плотность распределения\n",
    "    x_vals = np.linspace(min(sample_means), max(sample_means), 100)\n",
    "    pdf_theoretical = stats.norm.pdf(x_vals, loc=mean_true, scale=math.sqrt(variance_true / n_samples))\n",
    "    plt.plot(x_vals, pdf_theoretical, 'k-', lw=2, label='Теоретическая плотность')\n",
    "    \n",
    "    plt.xlabel('Средние значения')\n",
    "    plt.ylabel('Плотность')\n",
    "    plt.title(f'Распределение выборочных средних (n={n_samples})')\n",
    "    plt.legend()\n",
    "    \n",
    "    if save_as:\n",
    "        plt.savefig(save_as)  # Сохранение графика\n",
    "    \n",
    "    plt.show()\n",
    "    \n",
    "    print(f'Среднее значение выборочных средних (n={n_samples}): {np.mean(sample_means):.4f}')\n",
    "    print(f'Дисперсия выборочных средних (n={n_samples}): {np.var(sample_means, ddof=1):.4f}')\n",
    "\n",
    "# Примеры с разными объемами выборок\n",
    "plot_distribution_of_sample_means(cosine_distribution, n_samples=30, num_iterations=1000, mean_true=true_mean, variance_true=true_variance, save_as='means_distribution_30.png')\n",
    "plot_distribution_of_sample_means(cosine_distribution, n_samples=100, num_iterations=1000, mean_true=true_mean, variance_true=true_variance, save_as='means_distribution_100.png')\n",
    "plot_distribution_of_sample_means(cosine_distribution, n_samples=500, num_iterations=1000, mean_true=true_mean, variance_true=true_variance, save_as='means_distribution_500.png')\n",
    "\n",
    "# Загрузка данных из файла\n",
    "df = pd.read_csv(\"https://raw.githubusercontent.com/piton1/DS/Lesson_5/telecom_churn.csv\")\n",
    "\n",
    "# Группировка данных по признаку оттока\n",
    "grouped_data = df.groupby('churn')['total day calls']\n",
    "\n",
    "# Подсчет статистик для каждой группы\n",
    "statistics = grouped_data.agg(['mean', 'var', 'count'])\n",
    "\n",
    "# Функция для расчета доверительного интервала\n",
    "def get_confidence_interval(mean, variance, sample_size, confidence_level=0.95):\n",
    "    standard_error = math.sqrt(variance / sample_size)\n",
    "    z_score = stats.norm.ppf((1 + confidence_level) / 2)\n",
    "    return (mean - z_score * standard_error, mean + z_score * standard_error)\n",
    "\n",
    "# Подсчет доверительных интервалов для каждой группы\n",
    "interval_results = {}\n",
    "for churn_status, row in statistics.iterrows():\n",
    "    mean_value = row['mean']\n",
    "    variance_value = row['var']\n",
    "    sample_count = row['count']\n",
    "    ci_manual = get_confidence_interval(mean_value, variance_value, sample_count)\n",
    "    \n",
    "    # Проверка с помощью _zconfint_generic\n",
    "    standard_error = math.sqrt(variance_value / sample_count)\n",
    "    ci_statsmodels = _zconfint_generic(mean_value, standard_error, alpha=0.05, alternative='two-sided')\n",
    "    \n",
    "    interval_results[churn_status] = {\n",
    "        'mean': mean_value,\n",
    "        'variance': variance_value,\n",
    "        'count': sample_count,\n",
    "        'ci_manual': ci_manual,\n",
    "        'ci_statsmodels': ci_statsmodels\n",
    "    }\n",
    "\n",
    "# Вывод результатов\n",
    "for churn_status, result in interval_results.items():\n",
    "    print(f\"Churn Status: {churn_status}\")\n",
    "    print(f\"Среднее: {result['mean']:.2f}\")\n",
    "    print(f\"Дисперсия: {result['variance']:.2f}\")\n",
    "    print(f\"Количество: {result['count']}\")\n",
    "    print(f\"Доверительный интервал (ручной расчет): {result['ci_manual']}\")\n",
    "    print(f\"Доверительный интервал (statsmodels): {result['ci_statsmodels']}\")\n",
    "    print()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Анализ данных и визуализация\n",
    "\n",
    "Этот ноутбук демонстрирует генерацию данных из косинусного распределения, построение гистограмм, расчет статистик выборки и доверительных интервалов. Также выполняется загрузка данных, их группировка и расчет статистик по группам."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
